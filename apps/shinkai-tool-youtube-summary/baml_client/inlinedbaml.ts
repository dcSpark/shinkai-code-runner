/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
/* eslint-disable */
const fileMap = {
  
  "generators.baml": "\n// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"typescript\"\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.54.2\"\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    // Regardless of this setting, you can always explicitly call either of the following:\n    // - b.sync.FunctionName()\n    // - b.async_.FunctionName() (note the underscore to avoid a keyword conflict)\n    default_client_mode async\n}",
  "summarize-youtube-video.baml": "// Defining a data model.\r\nclass YoutubeVideoSummary {\r\n  url string @description(\"URL of the YouTube video\")\r\n  briefSummary string @description(\"Brief summary of the content\")\r\n  sections YoutubeVideoSummarySection[] @description(\"Key sections along the video\")\r\n}\r\n\r\n// Defining a data model.\r\nclass YoutubeVideoSummarySection {\r\n  url string @description(\"URL of the YouTube video for this section\")\r\n  offset int @description(\"offset in seconds where this section start in the video\")\r\n  title string @description(\"Title of this section\")\r\n  keyPoints string[] @description(\"key points of this section\")\r\n}\r\n\r\nclient<llm> LlmClient {\r\n  provider \"openai-generic\"\r\n  options {\r\n    model \"gpt-4o\"\r\n  }\r\n}\r\n\r\n// Creating a function to summarize a YouTube video\r\nfunction SummarizeYoutubeVideo(youtubeVideoUrl: string, transcript: string) -> YoutubeVideoSummary {\r\n  client LlmClient\r\n  prompt #\"\r\n    {{ _.role(\"system\") }}\r\n    According to a transcription of a youtube video (which is in csv separated by ':::'):\r\n  \r\n    Write a brief summary of the video as instroduction.\r\n    Then write more about the content divided in sections (at least 3) along the video.\r\n    For every section define between 2-5 key points.\r\n    For every section a links referencing where that section start in the video. The format for those links is https://www.youtube.com/watch?v={video_id}&t={offset} where 'offset' is a number and can be obtained from the transcription in csv format to generate the URL\r\n    Format the answer using markdown.\r\n\r\n    {{ ctx.output_format }}\r\n\r\n\r\n    {{ _.role(\"user\") }}\r\n    Youtube Video Url:\r\n    ---\r\n    {{ youtubeVideoUrl }}\r\n    ---\r\n\r\n    Csv:\r\n    ---\r\n    {{ transcript }}\r\n    ---\r\n  \"#\r\n}\r\n\r\n// Testing the function with a sample resume.\r\n// test vaibhav_resume {\r\n//   functions [ExtractResume]\r\n//   args {\r\n//     resume #\"\r\n//       Vaibhav Gupta\r\n//       vbv@boundaryml.com\r\n\r\n//       Experience:\r\n//       - Founder at BoundaryML\r\n//       - CV Engineer at Google\r\n//       - CV Engineer at Microsoft\r\n\r\n//       Skills:\r\n//       - Rust\r\n//       - C++\r\n//     \"#\r\n//   }\r\n// }\r\n",
}
export const getBamlFiles = () => {
    return fileMap;
}